#! /usr/bin/env python3
# Copyright (c) 2018 Karl Otness
import argparse, os
from PIL import Image
import image, model, loader

def build_parser():
    parser = argparse.ArgumentParser(description = "Neural-network image style transfer")
    parser.add_argument('image', type = str,
                        help = "input image to be re-styled")
    parser.add_argument('art', type = str,
                        help = "image from which to draw style")
    parser.add_argument('out', type = str,
                        help = "destination for generated image")
    parser.add_argument('-n', '--niter', type = int, metavar = 'N',
                        default = 150,
                        help = "Number of training iterations to run")
    parser.add_argument('-s', '--stylewt', type = float, metavar = 'S',
                        default = 1.0,
                        help = "Weight of style information in training")
    parser.add_argument('-c', '--contwt', type = float, metavar = 'C',
                        default = 1E-4,
                        help = "Weight of content information in training")
    parser.add_argument('--vgg', type = str, metavar = 'V',
                        default = '16', choices = ['16', '19'],
                        help = "The VGG network to use")
    return parser

def find_weights(vgg_num):
    import __main__
    basedir = os.path.dirname(__main__.__file__)
    filename = 'vgg{}-weights.npz'.format(vgg_num)
    return os.path.join(basedir, filename)

# Parse arguments
parser = build_parser()
args = parser.parse_args()
# Load images and model weights
art = Image.open(args.art)
img = Image.open(args.image)
weights = loader.load_weights(find_weights(args.vgg))
# Convert images to arrays
art_arr, art_mean = image.convert_image(art)
img_arr, img_mean = image.convert_image(img)
# Build transfer model
model = model.StyleTransfer(weights, art_arr, img_arr,
                            content_weight = args.contwt,
                            style_weight = args.stylewt)
# Run training
model.init()
for iter in range(args.niter):
    train_result = model.train()
    print("Iter {} of {}. Losses: Total: {} Style: {} Content: {}".format(iter + 1, args.niter,
                                                                          train_result.total_loss,
                                                                          train_result.style_loss,
                                                                          train_result.content_loss))
# Save generated images
gen = model.get_image_data()
gen_img = image.unconvert_image(gen, art_mean)
gen_img.save(args.out)
